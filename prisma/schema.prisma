// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String          @id @default(cuid())
  clerkId   String          @unique
  email     String?         @unique
  password  String?
  firstName String?
  lastName  String?
  events    CalendarEvent[]
  posts     Post[]
  content   Content[]
  createdAt DateTime        @default(now())
}

model CalendarEvent {
  id          String     @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  location    String?
  color       String     @default("#000000")
  priority    Priority   @default(Medium)
  tags        String[]
  userId      String
  recurring   Recurring?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum Priority {
  Low
  Medium
  High
}

model Recurring {
  id        String         @id @default(cuid())
  eventId   String         @unique
  frequency Frequency      @default(None)
  interval  Int            @default(1)
  event     CalendarEvent? @relation(fields: [eventId], references: [id])
}

enum Frequency {
  None
  Daily
  Weekly
  Monthly
  Yearly
}

model Post {
  id          String   @id @default(uuid())
  content     String
  scheduledAt DateTime
  isPosted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

model Content {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  status      String   @default("draft") // draft, scheduled, published
  platform    String   // e.g., "twitter", "linkedin", "facebook"
  scheduledAt DateTime?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  reminders   Reminder[]
}

model Reminder {
  id        String   @id @default(cuid())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id])
  time      DateTime
  status    String   @default("pending") // pending, sent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}